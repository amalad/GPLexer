Test 1:


#This is a comment
meant to be ignored#

#func is used to declare a function#

func int multiply(int a, int b)
{
    int c=a*b;
    return c;
}


print(multiply(12, 17));
print(ab@1234); #Should give an error since @ is not allowed#
#More comments but not stopped. Should give an error.



Output 1:

Enter rules file: Lithium.lex
Generating lexer from file...
Lexer generated.
Enter code file: Code1.lth
Scanning...
Token 8, string func, line number 6
Token 12, string int, line number 6
Token 21, string multiply, line number 6
Token 29, string (, line number 6
Token 12, string int, line number 6
Token 21, string a, line number 6
Token 26, string ,, line number 6
Token 12, string int, line number 6
Token 21, string b, line number 6
Token 30, string ), line number 6
Token 27, string {, line number 7
Token 12, string int, line number 8
Token 21, string c, line number 8
Token 36, string =, line number 8
Token 21, string a, line number 8
Token 48, string *, line number 8
Token 21, string b, line number 8
Token 31, string ;, line number 8
Token 13, string return, line number 9
Token 21, string c, line number 9
Token 31, string ;, line number 9
Token 28, string }, line number 10
Token 21, string print, line number 12
Token 29, string (, line number 12
Token 21, string multiply, line number 12
Token 29, string (, line number 12
Token 17, string 12, line number 12
Token 26, string ,, line number 12
Token 17, string 17, line number 12
Token 30, string ), line number 12
Token 30, string ), line number 12
Token 31, string ;, line number 12
Token 21, string print, line number 13
Token 29, string (, line number 13
Token 21, string ab, line number 13
Invalid, string @, line number 13
Token 17, string 1234, line number 13
Token 30, string ), line number 13
Token 31, string ;, line number 13
Comment not ended properly, line number 14







Test 2:

#This code is perfectly fine. Should give no errors#

func int fact(int r)
{
	return r*fact(r-1);
}

func int fib(int n)#function#
{
	if (n==1)
		return 1;
	else if(n==2)
		return 1;
	else
		return fib(n-1) + fib(n-2);
}

print("12th fibonacci is" + fib(12));

while(1)
{
	print ("Infinite loop");
} #Note: print will come out as an identifier since it is a function name#



Output 2:

Enter rules file: Lithium.lex
Generating lexer from file...
Lexer generated.
Enter code file: Code2.lth
Scanning...
Token 8, string func, line number 3
Token 12, string int, line number 3
Token 21, string fact, line number 3
Token 29, string (, line number 3
Token 12, string int, line number 3
Token 21, string r, line number 3
Token 30, string ), line number 3
Token 27, string {, line number 4
Token 13, string return, line number 5
Token 21, string r, line number 5
Token 48, string *, line number 5
Token 21, string fact, line number 5
Token 29, string (, line number 5
Token 21, string r, line number 5
Token 54, string -, line number 5
Token 17, string 1, line number 5
Token 30, string ), line number 5
Token 31, string ;, line number 5
Token 28, string }, line number 6
Token 8, string func, line number 8
Token 12, string int, line number 8
Token 21, string fib, line number 8
Token 29, string (, line number 8
Token 12, string int, line number 8
Token 21, string n, line number 8
Token 30, string ), line number 8
Token 27, string {, line number 9
Token 3, string if, line number 10
Token 29, string (, line number 10
Token 21, string n, line number 10
Token 37, string ==, line number 10
Token 17, string 1, line number 10
Token 30, string ), line number 10
Token 13, string return, line number 11
Token 17, string 1, line number 11
Token 31, string ;, line number 11
Token 4, string else, line number 12
Token 3, string if, line number 12
Token 29, string (, line number 12
Token 21, string n, line number 12
Token 37, string ==, line number 12
Token 17, string 2, line number 12
Token 30, string ), line number 12
Token 13, string return, line number 13
Token 17, string 1, line number 13
Token 31, string ;, line number 13
Token 4, string else, line number 14
Token 13, string return, line number 15
Token 21, string fib, line number 15
Token 29, string (, line number 15
Token 21, string n, line number 15
Token 54, string -, line number 15
Token 17, string 1, line number 15
Token 30, string ), line number 15
Token 52, string +, line number 15
Token 21, string fib, line number 15
Token 29, string (, line number 15
Token 21, string n, line number 15
Token 54, string -, line number 15
Token 17, string 2, line number 15
Token 30, string ), line number 15
Token 31, string ;, line number 15
Token 28, string }, line number 16
Token 21, string print, line number 18
Token 29, string (, line number 18
Token 20, string "12th fibonacci is", line number 18
Token 52, string +, line number 18
Token 21, string fib, line number 18
Token 29, string (, line number 18
Token 17, string 12, line number 18
Token 30, string ), line number 18
Token 30, string ), line number 18
Token 31, string ;, line number 18
Token 5, string while, line number 20
Token 29, string (, line number 20
Token 17, string 1, line number 20
Token 30, string ), line number 20
Token 27, string {, line number 21
Token 21, string print, line number 22
Token 29, string (, line number 22
Token 20, string "Infinite loop", line number 22
Token 30, string ), line number 22
Token 31, string ;, line number 22
Token 28, string }, line number 23





Test 3:


#Comments #

func avg(int a[], int n)
{
	int i;
	int sum=0;
	for(i=0; i<n; i++)
	{
		sum=sum+a[i];
	}
	return sum/(float)n;
}

int \arr[]={1,2,3,4,5,6,7}; #Should raise an error for \#
print(avg(arr));

print("Have a nice day!!!!");



Output 3:

Enter rules file: Lithium.lex
Generating lexer from file...
Lexer generated.
Enter code file: Code3.lth
Scanning...
Token 8, string func, line number 3
Token 21, string avg, line number 3
Token 29, string (, line number 3
Token 12, string int, line number 3
Token 21, string a, line number 3
Token 32, string [, line number 3
Token 33, string ], line number 3
Token 26, string ,, line number 3
Token 12, string int, line number 3
Token 21, string n, line number 3
Token 30, string ), line number 3
Token 27, string {, line number 4
Token 12, string int, line number 5
Token 21, string i, line number 5
Token 31, string ;, line number 5
Token 12, string int, line number 6
Token 21, string sum, line number 6
Token 36, string =, line number 6
Token 17, string 0, line number 6
Token 31, string ;, line number 6
Token 9, string for, line number 7
Token 29, string (, line number 7
Token 21, string i, line number 7
Token 36, string =, line number 7
Token 17, string 0, line number 7
Token 31, string ;, line number 7
Token 21, string i, line number 7
Token 43, string <, line number 7
Token 21, string n, line number 7
Token 31, string ;, line number 7
Token 21, string i, line number 7
Token 53, string ++, line number 7
Token 30, string ), line number 7
Token 27, string {, line number 8
Token 21, string sum, line number 9
Token 36, string =, line number 9
Token 21, string sum, line number 9
Token 52, string +, line number 9
Token 21, string a, line number 9
Token 32, string [, line number 9
Token 21, string i, line number 9
Token 33, string ], line number 9
Token 31, string ;, line number 9
Token 28, string }, line number 10
Token 13, string return, line number 11
Token 21, string sum, line number 11
Token 51, string /, line number 11
Token 29, string (, line number 11
Token 10, string float, line number 11
Token 30, string ), line number 11
Token 21, string n, line number 11
Token 31, string ;, line number 11
Token 28, string }, line number 12
Token 12, string int, line number 14
Invalid, string \, line number 14
Token 21, string arr, line number 14
Token 32, string [, line number 14
Token 33, string ], line number 14
Token 36, string =, line number 14
Token 27, string {, line number 14
Token 17, string 1, line number 14
Token 26, string ,, line number 14
Token 17, string 2, line number 14
Token 26, string ,, line number 14
Token 17, string 3, line number 14
Token 26, string ,, line number 14
Token 17, string 4, line number 14
Token 26, string ,, line number 14
Token 17, string 5, line number 14
Token 26, string ,, line number 14
Token 17, string 6, line number 14
Token 26, string ,, line number 14
Token 17, string 7, line number 14
Token 28, string }, line number 14
Token 31, string ;, line number 14
Token 21, string print, line number 15
Token 29, string (, line number 15
Token 21, string avg, line number 15
Token 29, string (, line number 15
Token 21, string arr, line number 15
Token 30, string ), line number 15
Token 30, string ), line number 15
Token 31, string ;, line number 15
Token 21, string print, line number 17
Token 29, string (, line number 17
Token 20, string "Have a nice day!!!!", line number 17
Token 30, string ), line number 17
Token 31, string ;, line number 17


